<!DOCTYPE html>
<html lang="en">

<head>
    	<meta charset="utf-8">
    	<meta http-equiv="X-UA-Compatible" content="IE=edge">
    	<meta name="viewport" content="width=device-width, initial-scale=1">
    	<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    	<title>Learn Python</title>

    	<!-- Bootstrap -->
    	<link href="../css/bootstrap.min.css" rel="stylesheet">
	<link rel="import" href="../import.html">
</head>


<body ng-app="myApp" ng-controller="myCtrl">


	<div class="container">
		<div id="subcontainer"></div>
                <script>
		    var link = document.querySelector('link[rel="import"]');

		    // Clone the <template> in the import.
		    var template = link.import.querySelector('template');
		    var clone = document.importNode(template.content, true);

		    document.querySelector('#subcontainer').appendChild(clone);
		  </script>




		<div class="row">
			<div class="container page-header alert-success">
				<h1>Exception Handling</h1>
			</div>
		</div>

		<div class="row">
			<div class=" panel panel-info">
		  		<!-- Default panel contents -->
		  		<div class="panel-heading">Objectives</div>
		  		<div class="panel-body">
					<p>1. To know what are errors and exceptions</p>
					<p>2. How to handle them</p>
		  		</div>

		 		<ul class="list-group">
					<li class="list-group-item">Duration: 15 min</li>
					<li class="list-group-item">Exercise : 1</li>
				   
				</ul>
			</div>
		</div>


	  	<div ><p>A functions is a small program that we write separately from the main program, but we call this small program in our main program. While we talk about functions, A general question is "why we need functions? we can put the code directly inside our main program". In simple scenarios we can do this. But functions provide many benefits which are not possible otherwise.</p>

<p> Organization -- As programs grow in complexity, having all the code live inside the main() function becomes increasingly complicated. Functions allows us to divide complicated tasks into smaller, simpler ones, and drastically reduces the overall complexity of our program.</p>
<p>Reusability -- Once a function is written, it can be called multiple times from within the program. This avoids duplicated code and minimizes the probability of copy/paste errors. Functions can also be shared with other programs, reducing the amount of code that has to be written from scratch (and retested) each time.</p>
<p>Testing -- Because functions reduce code redundancy, there’s less code to test in the first place. Also because functions are self-contained, once we’ve tested a function to ensure it works, we don’t need to test it again unless we change it. This reduces the amount of code we have to test at one time, making it much easier to find bugs (or avoid them in the first place).</p>
<p>Extensibility -- When we need to extend our program to handle a case it didn’t handle before, functions allow us to make the change in one place and have that change take effect every time the function is called.</p>
<p>Abstraction -- In order to use a function, you only need to know its name, inputs, outputs, and where it lives. You don’t need to know how it works, or what other code it’s dependent upon to use it. This is super-useful for making other people’s code accessible (such as everything in the standard library).<a href="http://www.learncpp.com/cpp-tutorial/1-4b-why-functions-are-useful-and-how-to-use-them-effectively/"> Read more about functions </a></p></div>

		<br>

<div >There are two types of functions. Built-in functions provided by python libraries and user defined functions created by developers. To define a function we use def keyword followed by the name of function and then optional parameter list within parathesis. Here is an example. The function power as its name implies calculates the power of a given number.</div>

		<br><br>

		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
			    	def power(num, pw):<br>
					&nbsp;&nbsp;&nbsp;&nbsp;result=1<br>
					&nbsp;&nbsp;&nbsp;&nbsp;for i in range(pw):<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result=result*num<br>
					&nbsp;&nbsp;&nbsp;&nbsp;return result<br>

				print(power(2,3))<br>
				print(power(3,3))<br>
				print(power(2,5))
				
				
  			</div>
		</div>
		<div class="panel panel-default" style="border-left: 6px solid brown;">
  			<div class="panel-body">
			    	8<br>
				27<br>
				32
  			</div>
		</div>
		<br><br>


		<div>we can define a function without any argument and without return statement like this. </div>
		
		<br><br>
		
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
			    	import datetime<br>

				def info():<br>
					&nbsp;&nbsp;&nbsp;&nbsp;size_in_kbs = 6125<br>
					&nbsp;&nbsp;&nbsp;&nbsp;print("Today's date is",datetime.date.today())<br>
					&nbsp;&nbsp;&nbsp;&nbsp;print("File processing ......")<br>
					&nbsp;&nbsp;&nbsp;&nbsp;print("......................")<br>
					&nbsp;&nbsp;&nbsp;&nbsp;print("done")<br>
					&nbsp;&nbsp;&nbsp;&nbsp;print("The size of file in Mbs is",size_in_kbs/1000)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;print("The size of file in Mbs is",size_in_kbs//1000)<br>

				info()
                                
  			</div>
		</div>
		<div> In python3 division with / always returns a float. To get an integer result use // instead. The output of the above code is</div>
		<div class="panel panel-default" style="border-left: 6px solid brown;">
  			<div class="panel-body">
			    	Today's date is 2016-10-26<br>
				File processing ......<br>
				......................<br>
				done<br>
				The size of file in Mbs is 6.125<br>
				The size of file in Mbs is 6<br>

				
  			</div>
		</div>
                <br><br>
		<div>Now to more organize our code we will rewrite it using functions. To calculate age groups and average of bilirubin factor we can write a function with two parameters. lb will be used to indicate the lower age limit for the group while ub will be used for upper age limit. Writing our code in this way it is more organized and efficient now.  
		</div>
		

		<br><br>
		


		
		
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
			    	def Calc_Age_Group(lb, ub):<br>
	
				&nbsp;&nbsp;&nbsp;&nbsp;tmp, counter = 0 , 0<br>
				&nbsp;&nbsp;&nbsp;&nbsp;for patient in range(len(list_of_patients)):<br>
					&nbsp;&nbsp;&nbsp;&nbsp;if int(list_of_patients[patient][1]) >= lb and int(list_of_patients[patient][1]) <= ub:<br>
						&nbsp;&nbsp;&nbsp;&nbsp;tmp = tmp + int(list_of_patients[patient][15])<br>
						&nbsp;&nbsp;&nbsp;&nbsp;counter1 = counter1 + 1<br>

				age_group.append(ub)<br>
				avg_factor.append(tmp/counter)

				
  			</div>
		</div>
		
		<br><br>

		<div>
			
			<p > The complete code to read data file, store data in memory, calculate average and then plot is: 
			</p>
		</div>

		
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
    				import matplotlib.pyplot as plt<br>

				age_group=[]<br>
				avg_factor=[]<br>
				list_of_patients=[]<br><br>
				def Read_File():<br>
					&nbsp;&nbsp;&nbsp;&nbsp;'''This function will be used to read a csv file and to load data in memory'''<br>
	
					&nbsp;&nbsp;&nbsp;&nbsp;patient=[]<br>
					&nbsp;&nbsp;&nbsp;&nbsp;with open('hepatitis.csv','r') as input:<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for reader in input:<br>
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#rstrip to remove \n character<br>
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reader = reader.rstrip()<br>
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;patient= reader.split(',')<br>
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list_of_patients.append(patient)<br><br>


				def Calc_Age_Group(lb, ub):<br>
					&nbsp;&nbsp;&nbsp;&nbsp;'''This function will calculate the average of each age group'''<br>
					&nbsp;&nbsp;&nbsp;&nbsp;tmp, counter = 0 , 0<br>
					&nbsp;&nbsp;&nbsp;&nbsp;for patient in range(len(list_of_patients)):<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if int(list_of_patients[patient][1]) >= lb and int(list_of_patients[patient][1]) <= ub:<br>
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = tmp + int(list_of_patients[patient][15])<br>
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter = counter + 1<br>

					&nbsp;&nbsp;&nbsp;&nbsp;age_group.append(ub)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;avg_factor.append(tmp/counter)<br><br>
	

				def Draw_Graph():<br>
					&nbsp;&nbsp;&nbsp;&nbsp;'''This function will be used to draw graph'''<br>
					&nbsp;&nbsp;&nbsp;&nbsp;plt.plot(age_group, avg_factor)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;plt.xlabel('Age of Patient')<br>
					&nbsp;&nbsp;&nbsp;&nbsp;plt.ylabel('Bilirubin Factor')<br>
					&nbsp;&nbsp;&nbsp;&nbsp;plt.title('Scanning Patient Attributes...')<br>
					&nbsp;&nbsp;&nbsp;&nbsp;plt.grid(True)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;plt.savefig("age_bilirubin.png")<br>
					&nbsp;&nbsp;&nbsp;&nbsp;plt.show()<br><br>


				def main():<br>
					&nbsp;&nbsp;&nbsp;&nbsp;'''To control the processing of our code'''<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Read_File()<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(1,10)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(11,20)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(21,30)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(31,40)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(41,50)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(51,60)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(61,70)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(71,80)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;Draw_Graph()<br><br>

				main()

				



  			</div>
		</div>

                

		<br><br>

		<div>
			<p>Now having look at the code there is still some code that is repeating. Look at the line where we are calling our function Calc_Age_Group<br>

				Calc_Age_Group(1,10)<br>
				Calc_Age_Group(11,20)<br>
				Calc_Age_Group(21,30)<br>
				Calc_Age_Group(31,40)<br>
				Calc_Age_Group(41,50)<br>
				Calc_Age_Group(51,60)<br>
				Calc_Age_Group(61,70)<br>
				Calc_Age_Group(71,80)<br>
  				we can further refine our main function by putting these function calls in a for loop.<br>


			</p>	
		</div>
	
		
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
    				def main():<br>
				'''To control the processing of our code'''<br>
				&nbsp;&nbsp;&nbsp;&nbsp;Read_File()<br>
				&nbsp;&nbsp;&nbsp;&nbsp;for idx in range(1,80,10):<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(idx, idx+9)<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Calc_Age_Group(idx, idx+9)<br>
				&nbsp;&nbsp;&nbsp;&nbsp;Draw_Graph()<br>
  			</div>
		</div>
		

		<br><br>
		<div><p>
		Take a look at ''' in second line. This is called docstring. when write a string in this way, we can break it into multiple lines. write help(Read_File) on python prompt or through script will display these content on screen. We can provide description of the function and how to use it here.
		</p></div>
		

		<div class="panel">
			<a class="btn btn-primary" role="button" data-toggle="collapse" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
				What is the output of given code?<br><br>	
                                def quadcube(x):<br>
				    &nbsp;&nbsp;&nbsp;&nbsp;return x**2, x**3<br>
				 
				a, b = quadcube(3)<br>
				print (a, b)

				

			</a>
		</div>
		<div class="collapse" id="collapseTwo">
			<div class="well">
		    	9 &nbsp;&nbsp;&nbsp;&nbsp;  27
			</div>
		</div>

		<br><br>


	      
<div class="page-header alert-success">
  <p> <a href="07-exception-py">Next >> Exception Handling</a> </p>
</div>

	</div><!-- /.container-fluid -->



<script src="../js/angular.min.js"></script>
	
	
	<script src = "../js/jquery.min.js"> </script>

	<!-- Include all compiled plugins (below), or include individual files as needed -->
	<script src="../js/bootstrap.min.js"></script>

	<script>
		var app = angular.module('myApp', []);
		app.controller('myCtrl', function($scope)
		{
	    		$scope.section1 = "Python is freeware. We call such a software as open source software. Open source means we can get the entire system for free over the Internet. There are no restrictions on copying it, embedding it in systems, or shipping it with products. Python is written in portable ANSI C, and compiles and runs on virtually every major platform in use today. For example, it runs on Unix systems, Linux, MS-DOS, MS-Windows (95, 98, NT), Macintosh, Amiga, Be-OS, OS/2, VMS, QNX, and more. Python provides all the simplicity and ease of use of a scripting language, along with more advanced programming tools typically found in systems development languages. It is a powerful language.";
	    		

		});
	</script>

</body>
</html>
