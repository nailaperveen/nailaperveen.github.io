<!DOCTYPE html>
<html lang="en">

<head>
    	<meta charset="utf-8">
    	<meta http-equiv="X-UA-Compatible" content="IE=edge">
    	<meta name="viewport" content="width=device-width, initial-scale=1">
    	<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    	<title>Learn Python</title>

    	<!-- Bootstrap -->
    	<link href="../css/bootstrap.min.css" rel="stylesheet">
	<link rel="import" href="../import.html">
</head>


<body ng-app="myApp" ng-controller="myCtrl">


	<div class="container">
		<div id="subcontainer"></div>
                <script>
		    var link = document.querySelector('link[rel="import"]');

		    // Clone the <template> in the import.
		    var template = link.import.querySelector('template');
		    var clone = document.importNode(template.content, true);

		    document.querySelector('#subcontainer').appendChild(clone);
		  </script>



		<div class="row">
			<div class="container page-header alert-success">
				<h1>Conditions</h1>
			</div>
		</div>

		<div class="row">
			<div class=" panel panel-info">
		  		<!-- Default panel contents -->
		  		<div class="panel-heading">Objectives</div>
		  		<div class="panel-body">
					<p>1. To know what are alternative paths to run a program</p>
					<p>2. Performance improvement</p>
		  		</div>

		 		<ul class="list-group">
					<li class="list-group-item">Duration: 15 min</li>
					<li class="list-group-item">Exercise : 1</li>
				   
				</ul>
			</div>
		</div>


	  	<div >In the previous lecture if you look at the resultant plot, it is a bit random. We can do it more better by applying some transformations on our data. We have different age gropus of patients from 4 to 90. Lets try to take average for each age group. To check age groups of patients we will put checks on our data. To implement check we use if conditions, which is more similar to our natural language. if this happens, do this, otherwise do that. Lets explore this with a simple condition first.</div>

		<br><br>
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
			    	x = 10<br>
				y = 23<br>
				if x == 10 and y == 20:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;print ("Good")<br>

				if x == 10  or y == 20:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;print ("Ok")
				
  			</div>
		</div>
		<div class="panel panel-default" style="border-left: 6px solid brown;">
  			<div class="panel-body">
			    	Ok
				
  			</div>
		</div>
		<br><br>


		<div>What if both conditions goes wrong? No output. We can write the above code like this.</div>
		
		<br><br>
		
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
			    	x = 10<br>
				y = 23<br>
				if x == 10 and y == 20:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;print ("Good")<br>

				elif x == 10  or y == 20:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;print ("Ok")<br>
				else:<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;print ("Try Again")
  			</div>
		</div>
		<div class="panel panel-default" style="border-left: 6px solid brown;">
  			<div class="panel-body">
			    	Ok
				
  			</div>
		</div>
                <br><br>
		<div>The output is same in both programs but there are performance differences. In our first code both conditions will run everytime. In our second code if any one condition gets true, rest will be skipped.
		</div>
		

		<br><br>
		<div>In our scenario we will check if age of patients is in between 1 to 10 years or 11 to 20 years or 21 to 30 years and so on. After dividing them into groups we will take average of certain parameters. This is a familiar technique to refine our data.
		</div>
		
		<br><br>
		


		
		
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
			    	age_group=[]<br>
				avg_factor=[]<br>
				tmp = 0<br>
				counter = 0<br>
				for patient in range(len(list_of_patients)):<br>
	
				&nbsp;&nbsp;&nbsp;&nbsp;if int(list_of_patients[patient][1]) >= 1 and int(list_of_patients[patient][1]) <= 10:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = tmp + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter = counter + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(counter)<br>
				age.append(10)<br>
				avg.append(tmp/counter)
				
  			</div>
		</div>
		
		<br><br>

		<div>
			
			<p > The if condition used in above code is composite. There are two parts of condition. First one says that age of patient should be one or greater than one and the second one says that age should be ten or less than 10. <,>,<=,>=,==,!= are called as relational operators. They are used to compare values. "and" is logical operator that is used to combine two different conditions. "and" means if condition will be evaluated to true only when both condtions will be set to true. If any one condition fails, then if will be set to "false". 
			</p>
		</div>

		<div>
			
			<p > Here in this code we are searching for all rows having age in between 1 to 10 and taking the average of bilirubin factor. But what we have to do is to take average of each group of ages. years 1-10, 11-20, 21-30 and so on. For getting this behavior we will expand our condition further. For each possible age group add else if (elif) clause and finally add else. If no condition is true else will run.
			</p>
		</div>
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
    				age_group=[]<br>
				avg_factor=[]<br>
				tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8 = 0, 0, 0, 0, 0, 0, 0, 0<br>
				counter1, counter2, counter3, counter4, counter5, counter6, counter7, counter8 =  0, 0, 0, 0, 0, 0, 0, 0<br>
				for patient in range(len(list_of_patients)):<br>
	
				&nbsp;&nbsp;&nbsp;&nbsp;if int(list_of_patients[patient][1]) >= 1 and int(list_of_patients[patient][1]) <= 10:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp1 = tmp1 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter1 = counter1 + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;elif int(list_of_patients[patient][1]) >= 11 and int(list_of_patients[patient][1]) <= 20:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp2 = tmp2 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter2 = counter2 + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;elif int(list_of_patients[patient][1]) >= 21 and int(list_of_patients[patient][1]) <= 30:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp3 = tmp3 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter3 = counter3 + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;elif int(list_of_patients[patient][1]) >= 31 and int(list_of_patients[patient][1]) <= 40:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp4 = tmp4 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter4 = counter4 + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;elif int(list_of_patients[patient][1]) >= 41 and int(list_of_patients[patient][1]) <= 50:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp5 = tmp5 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter5 = counter5 + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;elif int(list_of_patients[patient][1]) >= 51 and int(list_of_patients[patient][1]) <= 60:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp6 = tmp6 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter6 = counter6 + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;elif int(list_of_patients[patient][1]) >= 61 and int(list_of_patients[patient][1]) <= 70:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp7 = tmp7 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter7 = counter7 + 1<br>
				&nbsp;&nbsp;&nbsp;&nbsp;else:<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp8 = tmp8 + int(list_of_patients[patient][15])<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter8 = counter8 + 1<br>
		
				for i in range(10,90,10):<br>
				&nbsp;&nbsp;&nbsp;&nbsp;age_group.append(i)<br>
	
				avg_factor.append(tmp1/counter1)<br>
				avg_factor.append(tmp2/counter2)<br>
				avg_factor.append(tmp3/counter3)<br>
				avg_factor.append(tmp4/counter4)<br>
				avg_factor.append(tmp5/counter5)<br>
				avg_factor.append(tmp6/counter6)<br>
				avg_factor.append(tmp7/counter7)<br>
				avg_factor.append(tmp8/counter8)


  			</div>
		</div>

                

		<br><br>

		<div>
			<p>Have a look at plot now. It is more readable.
. 
			</p>	
		</div>
	
		
		<div class="panel panel-default" style="border-left: 6px solid #646D7E;">
  			<div class="panel-body">
    				import matplotlib.pyplot as plt<br>

				plt.plot(age_group, avg_factor)<br>
				plt.xlabel('Age of Patient')<br>
				plt.ylabel('Bilirubin Factor')<br>
				plt.title('Scanning Patient Attributes...')<br>
				plt.grid(True)<br>
				plt.savefig("age_bilirubin.png")<br>
				plt.show()
  			</div>
		</div>
		<div class="panel panel-default" style="border-left: 6px solid brown;">
  			<div class="panel-body">
    				<img src="../images/age_bilirubin_r.png" height="300" width="400">
				
  			</div>
		</div>

		<br><br>

		

		<div class="panel">
			<a class="btn btn-primary" role="button" data-toggle="collapse" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
				What is the output of given code?<br><br>	
                                name = "John" 	<br>		
				if name in ["John", "Rick"]:<br>
    					&nbsp;&nbsp;&nbsp;&nbsp;print ("Your name is either John or Rick.")<br>
                                else:<br>
                                        &nbsp;&nbsp;&nbsp;&nbsp;print("Sorry")<br>
				

			</a>
		</div>
		<div class="collapse" id="collapseTwo">
			<div class="well">
		    	Your name is either John or Rick.
			</div>
		</div>

		<br><br>


	      
<div class="page-header alert-success">
  <p> <a href="03-loops-py">Next >> Functions</a> </p>
</div>

	</div><!-- /.container-fluid -->



<script src="../js/angular.min.js"></script>
	
	
	<script src = "../js/jquery.min.js"> </script>

	<!-- Include all compiled plugins (below), or include individual files as needed -->
	<script src="../js/bootstrap.min.js"></script>

	<script>
		var app = angular.module('myApp', []);
		app.controller('myCtrl', function($scope)
		{
	    		$scope.section1 = "Python is freeware. We call such a software as open source software. Open source means we can get the entire system for free over the Internet. There are no restrictions on copying it, embedding it in systems, or shipping it with products. Python is written in portable ANSI C, and compiles and runs on virtually every major platform in use today. For example, it runs on Unix systems, Linux, MS-DOS, MS-Windows (95, 98, NT), Macintosh, Amiga, Be-OS, OS/2, VMS, QNX, and more. Python provides all the simplicity and ease of use of a scripting language, along with more advanced programming tools typically found in systems development languages. It is a powerful language.";
	    		

		});
	</script>

</body>
</html>
